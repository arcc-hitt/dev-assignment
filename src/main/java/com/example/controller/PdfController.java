package com.example.controller;

import com.example.util.PdfUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@Controller
@RequestMapping("/pdf")
public class PdfController {

    @Autowired
    private PdfUtil pdfUtil;

    /**
     * Handles GET requests to generate a "Hello World" PDF.
     * The PDF content is generated by PdfUtil and streamed back to the client.
     *
     * @return ResponseEntity containing the PDF byte array and appropriate headers.
     * @throws IOException If there's an error during PDF generation.
     */
    @GetMapping("/hello-world")
    public ResponseEntity<byte[]> generateHelloWorldPdf() throws IOException {
        // Generate the "Hello World" PDF using PdfUtil
        byte[] pdfData = pdfUtil.generateHelloWorldPdf();

        // Set HTTP headers for PDF response
        HttpHeaders headers = new HttpHeaders();
        // Set Content-Type to application/pdf so the browser knows it's a PDF
        headers.setContentType(MediaType.APPLICATION_PDF);
        // Set Content-Disposition to "attachment" to prompt a download, with a .pdf filename
        headers.setContentDispositionFormData("attachment", "hello-world.pdf");

        // Return the PDF data in the response body
        return ResponseEntity.ok()
                .headers(headers)
                .body(pdfData);
    }

    /**
     * Handles POST requests to generate a PDF from custom HTML content.
     * The HTML content is received in the request body, converted to PDF by PdfUtil,
     * and then streamed back to the client.
     *
     * @param htmlContent The HTML string received from the client.
     * @return ResponseEntity containing the PDF byte array and appropriate headers.
     * @throws IOException If there's an error during PDF generation.
     */
    @PostMapping("/generate")
    @ResponseBody // Indicates that the return value should be bound to the web response body
    public ResponseEntity<byte[]> generatePdfFromHtml(@RequestBody String htmlContent) throws IOException {
        // Generate the custom PDF from the provided HTML content using PdfUtil
        byte[] pdfData = pdfUtil.generatePdfFromHtml(htmlContent);

        // Set HTTP headers for PDF response
        HttpHeaders headers = new HttpHeaders();
        // Set Content-Type to application/pdf
        headers.setContentType(MediaType.APPLICATION_PDF);
        // Set Content-Disposition to "attachment" with a .pdf filename
        headers.setContentDispositionFormData("attachment", "generated.pdf");

        // Return the PDF data in the response body
        return ResponseEntity.ok()
                .headers(headers)
                .body(pdfData);
    }
}
